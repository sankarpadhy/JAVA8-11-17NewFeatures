package com.java.features.java8.nashorn;

import javax.script.*;
import jdk.nashorn.api.scripting.*;
import java.io.FileReader;
import java.util.function.Function;

/**
 * Demonstrates Java 8's Nashorn JavaScript Engine features.
 * Nashorn provides a lightweight, high-performance JavaScript runtime for the JVM.
 * 
 * Key features demonstrated:
 * 1. Basic script evaluation
 * 2. Java-JavaScript interop
 * 3. Script file loading
 * 4. Function invocation
 * 5. Object manipulation
 * 
 * Note: Nashorn was deprecated in Java 11 and removed in Java 15.
 * For newer Java versions, consider using GraalJS.
 */
public class NashornExample {

    /**
     * Demonstrates basic JavaScript evaluation.
     * Shows how to:
     * - Create a script engine
     * - Evaluate simple expressions
     * - Handle JavaScript return values
     * 
     * @return Result of JavaScript evaluation
     * @throws ScriptException if script evaluation fails
     */
    public static Object evaluateJavaScript() throws ScriptException {
        // Create script engine
        ScriptEngine engine = new ScriptEngineManager().getEngineByName("nashorn");
        
        // Evaluate JavaScript expression
        Object result = engine.eval("'Hello, ' + 'Nashorn!'");
        
        // Evaluate JavaScript arithmetic
        Object calculation = engine.eval("10 + 20 * 3");
        
        return String.format("String result: %s, Calculation: %s", result, calculation);
    }

    /**
     * Demonstrates passing Java objects to JavaScript.
     * Shows how to:
     * - Share variables between Java and JavaScript
     * - Access Java objects from JavaScript
     * - Modify Java objects in JavaScript
     * 
     * @param name Name to pass to JavaScript
     * @return Modified string from JavaScript
     * @throws ScriptException if script evaluation fails
     */
    public static String passJavaObjects(String name) throws ScriptException {
        ScriptEngine engine = new ScriptEngineManager().getEngineByName("nashorn");
        
        // Create bindings to share variables
        Bindings bindings = engine.createBindings();
        bindings.put("javaName", name);
        
        // Use Java object in JavaScript
        String script = 
            "var greeting = 'Hello, ' + javaName + '!';" +
            "greeting.toUpperCase()";
        
        return (String) engine.eval(script, bindings);
    }

    /**
     * Demonstrates calling JavaScript functions from Java.
     * Shows how to:
     * - Define functions in JavaScript
     * - Invoke them from Java
     * - Pass parameters and receive results
     * 
     * @param x First number
     * @param y Second number
     * @return Result of JavaScript function
     * @throws ScriptException if script evaluation fails
     * @throws NoSuchMethodException if function is not found
     */
    public static double callJavaScriptFunction(double x, double y) 
            throws ScriptException, NoSuchMethodException {
        ScriptEngine engine = new ScriptEngineManager().getEngineByName("nashorn");
        
        // Define JavaScript function
        engine.eval("function calculate(x, y) { return x * y + Math.sqrt(x + y); }");
        
        // Get function reference
        Invocable invocable = (Invocable) engine;
        
        // Call function with parameters
        return (double) invocable.invokeFunction("calculate", x, y);
    }

    /**
     * Demonstrates calling Java methods from JavaScript.
     * Shows how to:
     * - Make Java methods available to JavaScript
     * - Call them from JavaScript code
     * - Handle return values
     * 
     * @param text Text to process
     * @return Result from JavaScript processing
     * @throws ScriptException if script evaluation fails
     */
    public static String callJavaFromJavaScript(String text) throws ScriptException {
        ScriptEngine engine = new ScriptEngineManager().getEngineByName("nashorn");
        
        // Create Java method to be called from JavaScript
        engine.put("javaMethod", new Function<String, String>() {
            @Override
            public String apply(String input) {
                return input.trim().toLowerCase();
            }
        });
        
        // Call Java method from JavaScript
        String script = 
            "var processed = javaMethod('" + text + "');" +
            "processed.toUpperCase()";
        
        return (String) engine.eval(script);
    }

    /**
     * Demonstrates loading and executing JavaScript files.
     * Shows how to:
     * - Load external JavaScript files
     * - Execute their contents
     * - Access defined functions and variables
     * 
     * @param scriptPath Path to JavaScript file
     * @return Result of script execution
     * @throws Exception if script loading or execution fails
     */
    public static Object loadJavaScriptFile(String scriptPath) throws Exception {
        ScriptEngine engine = new ScriptEngineManager().getEngineByName("nashorn");
        
        // Load and execute JavaScript file
        try (FileReader reader = new FileReader(scriptPath)) {
            return engine.eval(reader);
        }
    }

    /**
     * Demonstrates working with JavaScript arrays.
     * Shows how to:
     * - Create and manipulate JavaScript arrays
     * - Convert between Java and JavaScript arrays
     * - Use array methods
     * 
     * @return Result of array manipulation
     * @throws ScriptException if script evaluation fails
     */
    public static Object manipulateJavaScriptArray() throws ScriptException {
        ScriptEngine engine = new ScriptEngineManager().getEngineByName("nashorn");
        
        // Create and manipulate array in JavaScript
        String script = 
            "var arr = [1, 2, 3, 4, 5];" +
            "arr = arr.map(function(x) { return x * 2; });" +
            "arr.filter(function(x) { return x > 5; })";
        
        return engine.eval(script);
    }

    /**
     * Demonstrates error handling in Nashorn.
     * Shows how to:
     * - Handle JavaScript errors in Java
     * - Provide custom error handling
     * - Access error details
     * 
     * @param script Potentially erroneous JavaScript code
     * @return Error message if script fails, result if successful
     */
    public static String handleJavaScriptErrors(String script) {
        try {
            ScriptEngine engine = new ScriptEngineManager().getEngineByName("nashorn");
            Object result = engine.eval(script);
            return "Success: " + result;
        } catch (ScriptException e) {
            return String.format("Error: %s at line %d, column %d",
                    e.getMessage(), e.getLineNumber(), e.getColumnNumber());
        }
    }

    /**
     * Demonstrates implementing Java interfaces in JavaScript.
     * Shows how to:
     * - Create JavaScript implementations of Java interfaces
     * - Use them in Java code
     * - Pass parameters between languages
     * 
     * @return Result of interface implementation
     * @throws ScriptException if script evaluation fails
     */
    public static String implementJavaInterface() throws ScriptException {
        ScriptEngine engine = new ScriptEngineManager().getEngineByName("nashorn");
        
        // Define JavaScript implementation
        String script = 
            "var StringProcessor = Java.type('java.util.function.Function');" +
            "new StringProcessor() {" +
            "    apply: function(text) {" +
            "        return text.toUpperCase() + '!';" +
            "    }" +
            "}";
        
        // Get implementation
        Function<String, String> processor = (Function<String, String>) engine.eval(script);
        
        // Use implementation
        return processor.apply("hello nashorn");
    }
}
